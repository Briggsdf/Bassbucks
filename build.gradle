buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    // move it here
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.+'
    }

}


plugins {
    id("org.jetbrains.kotlin.jvm") version "1.4.32"
    id("org.jetbrains.kotlin.kapt") version "1.4.32"
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application") version "1.5.0"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.4.32"


}
apply plugin: "com.google.cloud.tools.appengine-appyaml"
apply plugin: "com.google.cloud.tools.appengine"
version = "0.1"
group = "io.codeworld"

repositories {
    mavenCentral()
}

micronaut {
    runtime("jetty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.codeworld.*")
    }
}




dependencies {
    kapt("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut.openapi:micronaut-openapi")
    kapt("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("javax.annotation:javax.annotation-api")
    implementation('com.google.cloud.tools:appengine-gradle-plugin:2.+')
    implementation("io.micronaut:micronaut-http")
    implementation("com.google.cloud.tools:appengine-gradle-plugin:2.+")
    implementation ("com.google.firebase:firebase-admin:7.3.0")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation ("org.ktorm:ktorm-core:3.4.0")
    implementation ("org.ktorm:ktorm-jackson:3.4.0")
    implementation ("org.ktorm:ktorm-support-postgresql:3.4.0")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")
    implementation("io.micronaut:micronaut-validation")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
}
appengine {
    stage.artifact =
            "${buildDir}/libs/${project.name}-${project.version}.jar"
    deploy {
        projectId = "bassbucks-dev"
        version = "1"
    }
}

application {
    mainClass.set("io.codeworld.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
}
apply plugin: "com.google.cloud.tools.appengine-appyaml"

jar {
    enabled = false
    dependsOn(shadowJar{classifier = null})
    manifest {
        attributes(
                'Main-Class': 'io.codeworld.ApplicationKt'
        )
    }
}

shadowJar {
    mergeServiceFiles()
}


tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }


}
